class Solution{
public:
    vector<int> leaders;
    vector<int> size;
    int getLeader(int n){
        if(n==leaders[n]){
            return n;
        }
        return leaders[n]=getLeader(leaders[n]);
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        leaders.resize(n);
        size.resize(n);
        for(int i=0;i<n;i++){
            leaders[i]=i;
            size[i]=1;
        }
        for(int i=0;i<graph.size();i++){
            for(int j=0;j<graph[i].size();j++){
                if(i!=j and graph[i][j]==1){
                    int u=i;
                    int v=j;
                    int l1=getLeader(leaders[u]);
                    int l2=getLeader(leaders[v]);
                    if(l1!=l2){
                        size[l1]+=size[l2];
                        leaders[l2]=l1;
                    }
                }
            }
        }
        sort(initial.begin(),initial.end());//because 
        //we need the smallest number

        vector<int> ipc(n);//infected person count
        
        for(auto&ip:initial){
            ipc[getLeader(leaders[ip])]++;
        }
        int ans=initial[0];
        int max_pop=0;
        for(int i:initial){
            if(ipc[getLeader(i)]==1 and size[getLeader(i)]>max_pop){
                ans=i;
                max_pop=size[getLeader(i)];
            }
        }
        return ans;
    }
};